// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocol.proto

package protoc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserPartner struct {
	Id          string           `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	UserId      string           `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId   string           `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	AliasuserId string           `protobuf:"bytes,5,opt,name=aliasuserId,proto3" json:"aliasuserId,omitempty"`
	Apps        map[string]int64 `protobuf:"bytes,6,rep,name=apps,proto3" json:"apps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Phone       string           `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Created     int64            `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	UpdatedAt   int64            `protobuf:"varint,12,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (m *UserPartner) Reset()         { *m = UserPartner{} }
func (m *UserPartner) String() string { return proto.CompactTextString(m) }
func (*UserPartner) ProtoMessage()    {}
func (*UserPartner) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}
func (m *UserPartner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartner.Merge(m, src)
}
func (m *UserPartner) XXX_Size() int {
	return m.Size()
}
func (m *UserPartner) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartner.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartner proto.InternalMessageInfo

func (m *UserPartner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserPartner) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPartner) GetPartnerId() string {
	if m != nil {
		return m.PartnerId
	}
	return ""
}

func (m *UserPartner) GetAliasuserId() string {
	if m != nil {
		return m.AliasuserId
	}
	return ""
}

func (m *UserPartner) GetApps() map[string]int64 {
	if m != nil {
		return m.Apps
	}
	return nil
}

func (m *UserPartner) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserPartner) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *UserPartner) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type UserPartnerRequest struct {
}

func (m *UserPartnerRequest) Reset()         { *m = UserPartnerRequest{} }
func (m *UserPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*UserPartnerRequest) ProtoMessage()    {}
func (*UserPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{1}
}
func (m *UserPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerRequest.Merge(m, src)
}
func (m *UserPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerRequest proto.InternalMessageInfo

// Get all list
type UserPartnerListRequest struct {
}

func (m *UserPartnerListRequest) Reset()         { *m = UserPartnerListRequest{} }
func (m *UserPartnerListRequest) String() string { return proto.CompactTextString(m) }
func (*UserPartnerListRequest) ProtoMessage()    {}
func (*UserPartnerListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{2}
}
func (m *UserPartnerListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerListRequest.Merge(m, src)
}
func (m *UserPartnerListRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerListRequest proto.InternalMessageInfo

type UserPartnerListReponse struct {
	ListUser []*UserPartner `protobuf:"bytes,1,rep,name=listUser,proto3" json:"listUser,omitempty"`
}

func (m *UserPartnerListReponse) Reset()         { *m = UserPartnerListReponse{} }
func (m *UserPartnerListReponse) String() string { return proto.CompactTextString(m) }
func (*UserPartnerListReponse) ProtoMessage()    {}
func (*UserPartnerListReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{3}
}
func (m *UserPartnerListReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerListReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerListReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerListReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerListReponse.Merge(m, src)
}
func (m *UserPartnerListReponse) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerListReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerListReponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerListReponse proto.InternalMessageInfo

func (m *UserPartnerListReponse) GetListUser() []*UserPartner {
	if m != nil {
		return m.ListUser
	}
	return nil
}

//Get user by id
type UserPartnerByIdRequest struct {
	Id     string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Phone  string `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
	Limit  int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *UserPartnerByIdRequest) Reset()         { *m = UserPartnerByIdRequest{} }
func (m *UserPartnerByIdRequest) String() string { return proto.CompactTextString(m) }
func (*UserPartnerByIdRequest) ProtoMessage()    {}
func (*UserPartnerByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{4}
}
func (m *UserPartnerByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerByIdRequest.Merge(m, src)
}
func (m *UserPartnerByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerByIdRequest proto.InternalMessageInfo

func (m *UserPartnerByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserPartnerByIdRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UserPartnerByIdRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *UserPartnerByIdRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type UserPartnerByIdReponse struct {
	UsrPartner *UserPartner `protobuf:"bytes,1,opt,name=usrPartner,proto3" json:"usrPartner,omitempty"`
}

func (m *UserPartnerByIdReponse) Reset()         { *m = UserPartnerByIdReponse{} }
func (m *UserPartnerByIdReponse) String() string { return proto.CompactTextString(m) }
func (*UserPartnerByIdReponse) ProtoMessage()    {}
func (*UserPartnerByIdReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{5}
}
func (m *UserPartnerByIdReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPartnerByIdReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPartnerByIdReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPartnerByIdReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPartnerByIdReponse.Merge(m, src)
}
func (m *UserPartnerByIdReponse) XXX_Size() int {
	return m.Size()
}
func (m *UserPartnerByIdReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPartnerByIdReponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserPartnerByIdReponse proto.InternalMessageInfo

func (m *UserPartnerByIdReponse) GetUsrPartner() *UserPartner {
	if m != nil {
		return m.UsrPartner
	}
	return nil
}

//Delete user by id
type DeleteUserPartneRequest struct {
	Id string `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DeleteUserPartneRequest) Reset()         { *m = DeleteUserPartneRequest{} }
func (m *DeleteUserPartneRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteUserPartneRequest) ProtoMessage()    {}
func (*DeleteUserPartneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{6}
}
func (m *DeleteUserPartneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserPartneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserPartneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserPartneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserPartneRequest.Merge(m, src)
}
func (m *DeleteUserPartneRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserPartneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserPartneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserPartneRequest proto.InternalMessageInfo

func (m *DeleteUserPartneRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteUserPartnerReponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *DeleteUserPartnerReponse) Reset()         { *m = DeleteUserPartnerReponse{} }
func (m *DeleteUserPartnerReponse) String() string { return proto.CompactTextString(m) }
func (*DeleteUserPartnerReponse) ProtoMessage()    {}
func (*DeleteUserPartnerReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{7}
}
func (m *DeleteUserPartnerReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteUserPartnerReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteUserPartnerReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteUserPartnerReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteUserPartnerReponse.Merge(m, src)
}
func (m *DeleteUserPartnerReponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteUserPartnerReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteUserPartnerReponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteUserPartnerReponse proto.InternalMessageInfo

func (m *DeleteUserPartnerReponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

//Create new user
type CreateUserPartnerRequest struct {
	UsrPartner *UserPartner `protobuf:"bytes,1,opt,name=usrPartner,proto3" json:"usrPartner,omitempty"`
}

func (m *CreateUserPartnerRequest) Reset()         { *m = CreateUserPartnerRequest{} }
func (m *CreateUserPartnerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserPartnerRequest) ProtoMessage()    {}
func (*CreateUserPartnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{8}
}
func (m *CreateUserPartnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserPartnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserPartnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserPartnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserPartnerRequest.Merge(m, src)
}
func (m *CreateUserPartnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserPartnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserPartnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserPartnerRequest proto.InternalMessageInfo

func (m *CreateUserPartnerRequest) GetUsrPartner() *UserPartner {
	if m != nil {
		return m.UsrPartner
	}
	return nil
}

type CreateUserPartnerReponse struct {
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *CreateUserPartnerReponse) Reset()         { *m = CreateUserPartnerReponse{} }
func (m *CreateUserPartnerReponse) String() string { return proto.CompactTextString(m) }
func (*CreateUserPartnerReponse) ProtoMessage()    {}
func (*CreateUserPartnerReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{9}
}
func (m *CreateUserPartnerReponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserPartnerReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserPartnerReponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserPartnerReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserPartnerReponse.Merge(m, src)
}
func (m *CreateUserPartnerReponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserPartnerReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserPartnerReponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserPartnerReponse proto.InternalMessageInfo

func (m *CreateUserPartnerReponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*UserPartner)(nil), "main.UserPartner")
	proto.RegisterMapType((map[string]int64)(nil), "main.UserPartner.AppsEntry")
	proto.RegisterType((*UserPartnerRequest)(nil), "main.UserPartnerRequest")
	proto.RegisterType((*UserPartnerListRequest)(nil), "main.UserPartnerListRequest")
	proto.RegisterType((*UserPartnerListReponse)(nil), "main.UserPartnerListReponse")
	proto.RegisterType((*UserPartnerByIdRequest)(nil), "main.UserPartnerByIdRequest")
	proto.RegisterType((*UserPartnerByIdReponse)(nil), "main.UserPartnerByIdReponse")
	proto.RegisterType((*DeleteUserPartneRequest)(nil), "main.DeleteUserPartneRequest")
	proto.RegisterType((*DeleteUserPartnerReponse)(nil), "main.DeleteUserPartnerReponse")
	proto.RegisterType((*CreateUserPartnerRequest)(nil), "main.CreateUserPartnerRequest")
	proto.RegisterType((*CreateUserPartnerReponse)(nil), "main.CreateUserPartnerReponse")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x9d, 0x26, 0x25, 0x13, 0xa8, 0xe8, 0x2a, 0x84, 0x95, 0x29, 0x56, 0xb4, 0x17, 0xc2,
	0x81, 0x20, 0xc2, 0x01, 0x04, 0xa7, 0x16, 0x50, 0x15, 0x01, 0x12, 0x32, 0xaa, 0x84, 0xb8, 0x99,
	0x78, 0x24, 0x56, 0xb8, 0xf6, 0xb2, 0xbb, 0xae, 0x94, 0xbf, 0xe0, 0x47, 0xf8, 0x0f, 0x8e, 0x3d,
	0x72, 0x44, 0xc9, 0x99, 0x7f, 0x40, 0xde, 0xb5, 0x1b, 0xb7, 0xb6, 0x11, 0xe2, 0xe4, 0x9d, 0x79,
	0x33, 0xef, 0xbd, 0x9d, 0x59, 0x19, 0xf6, 0x84, 0x4c, 0x75, 0xba, 0x4c, 0xe3, 0x99, 0x39, 0x90,
	0x9d, 0xd3, 0x90, 0x27, 0xec, 0xbb, 0x0b, 0xc3, 0x13, 0x85, 0xf2, 0x5d, 0x28, 0x75, 0x82, 0x92,
	0xec, 0x81, 0xcb, 0x23, 0x3a, 0x9c, 0x38, 0xd3, 0x41, 0xe0, 0xf2, 0x88, 0x8c, 0xa1, 0x9f, 0x29,
	0x94, 0x8b, 0x88, 0x3a, 0x26, 0x57, 0x44, 0xe4, 0x00, 0x06, 0xc2, 0xb6, 0x2c, 0x22, 0xda, 0x35,
	0xd0, 0x36, 0x41, 0x26, 0x30, 0x0c, 0x63, 0x1e, 0xaa, 0xa2, 0xb5, 0x67, 0xf0, 0x6a, 0x8a, 0x3c,
	0x84, 0x9d, 0x50, 0x08, 0x45, 0xfb, 0x93, 0xee, 0x74, 0x38, 0xbf, 0x33, 0xcb, 0xcd, 0xcc, 0x2a,
	0x46, 0x66, 0x87, 0x42, 0xa8, 0x57, 0x89, 0x96, 0xab, 0xc0, 0x14, 0x92, 0x11, 0xf4, 0xc4, 0xe7,
	0x34, 0x41, 0xba, 0x6b, 0xc8, 0x6c, 0x40, 0x28, 0xec, 0x2e, 0x25, 0x86, 0x1a, 0x23, 0x0a, 0x13,
	0x67, 0xda, 0x0d, 0xca, 0x30, 0x37, 0x98, 0x89, 0x28, 0x3f, 0x1e, 0x6a, 0x7a, 0xdd, 0x60, 0xdb,
	0x84, 0xf7, 0x04, 0x06, 0x17, 0x02, 0xe4, 0x26, 0x74, 0xbf, 0xe0, 0xaa, 0xb8, 0x60, 0x7e, 0xcc,
	0xc5, 0xce, 0xc2, 0x38, 0x43, 0xea, 0x9a, 0x46, 0x1b, 0x3c, 0x73, 0x9f, 0x3a, 0x6c, 0x04, 0xa4,
	0xe2, 0x32, 0xc0, 0xaf, 0x19, 0x2a, 0xcd, 0x28, 0x8c, 0x2b, 0xd9, 0x37, 0x5c, 0xe9, 0x12, 0x39,
	0x6e, 0x40, 0x44, 0x9a, 0x28, 0x24, 0x0f, 0xe0, 0x5a, 0xcc, 0x95, 0xce, 0x51, 0xea, 0x98, 0x29,
	0xec, 0xd7, 0xa6, 0x10, 0x5c, 0x94, 0xb0, 0xf8, 0x12, 0xd1, 0xd1, 0x6a, 0x11, 0x15, 0x12, 0xff,
	0xbc, 0xb2, 0xe6, 0x09, 0x8e, 0xa0, 0x17, 0xf3, 0x53, 0xae, 0xcd, 0x55, 0x7b, 0x81, 0x0d, 0xd8,
	0xeb, 0x06, 0x35, 0x6b, 0xfb, 0x11, 0x40, 0xa6, 0x4a, 0xc0, 0x28, 0x34, 0x1a, 0xaf, 0x14, 0xb1,
	0xfb, 0x70, 0xfb, 0x25, 0xc6, 0xa8, 0x71, 0x5b, 0xd0, 0xe2, 0x9d, 0xcd, 0x81, 0x5e, 0x2d, 0x95,
	0xa5, 0xf2, 0x18, 0xfa, 0x4a, 0x87, 0x3a, 0x53, 0xe5, 0xbd, 0x6c, 0xc4, 0xde, 0x02, 0x7d, 0x61,
	0x96, 0x5e, 0x5f, 0xcc, 0xff, 0xb8, 0x9d, 0x37, 0xd2, 0xfd, 0xd5, 0xc2, 0xfc, 0xb7, 0x7b, 0xe9,
	0x59, 0xbc, 0x47, 0x79, 0xc6, 0x97, 0x48, 0x02, 0x20, 0xc7, 0xa8, 0xaf, 0x0c, 0x92, 0x1c, 0xd4,
	0xf4, 0x2b, 0xdb, 0xf4, 0xda, 0x50, 0x63, 0x80, 0x75, 0xea, 0x9c, 0xf9, 0x9b, 0x6a, 0xe0, 0xac,
	0x3c, 0x42, 0xaf, 0x0d, 0x2d, 0x39, 0x3f, 0xc0, 0xad, 0xda, 0xd4, 0x8d, 0xd5, 0xbb, 0xb6, 0xb1,
	0x65, 0x7b, 0x9e, 0xdf, 0x0c, 0xcb, 0x2d, 0xf3, 0x09, 0xec, 0xd7, 0x86, 0x49, 0x8a, 0xb6, 0xb6,
	0xa5, 0x79, 0xed, 0x78, 0x41, 0x7b, 0x74, 0xef, 0xc7, 0xda, 0x77, 0xce, 0xd7, 0xbe, 0xf3, 0x6b,
	0xed, 0x3b, 0xdf, 0x36, 0x7e, 0xe7, 0x7c, 0xe3, 0x77, 0x7e, 0x6e, 0xfc, 0xce, 0xc7, 0x1b, 0xf6,
	0x2f, 0xf7, 0xdc, 0x7e, 0x3e, 0xf5, 0xcd, 0xf7, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d,
	0xdb, 0xee, 0xbe, 0xfd, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserPartnerServiceClient is the client API for UserPartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserPartnerServiceClient interface {
	GetUserPartnerById(ctx context.Context, in *UserPartnerByIdRequest, opts ...grpc.CallOption) (*UserPartnerByIdReponse, error)
	GetUserPartnerList(ctx context.Context, in *UserPartnerListRequest, opts ...grpc.CallOption) (*UserPartnerListReponse, error)
	DeleteUserPartnerById(ctx context.Context, in *DeleteUserPartneRequest, opts ...grpc.CallOption) (*DeleteUserPartnerReponse, error)
	CreateUserPartner(ctx context.Context, in *CreateUserPartnerRequest, opts ...grpc.CallOption) (*CreateUserPartnerReponse, error)
}

type userPartnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserPartnerServiceClient(cc *grpc.ClientConn) UserPartnerServiceClient {
	return &userPartnerServiceClient{cc}
}

func (c *userPartnerServiceClient) GetUserPartnerById(ctx context.Context, in *UserPartnerByIdRequest, opts ...grpc.CallOption) (*UserPartnerByIdReponse, error) {
	out := new(UserPartnerByIdReponse)
	err := c.cc.Invoke(ctx, "/main.UserPartnerService/GetUserPartnerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPartnerServiceClient) GetUserPartnerList(ctx context.Context, in *UserPartnerListRequest, opts ...grpc.CallOption) (*UserPartnerListReponse, error) {
	out := new(UserPartnerListReponse)
	err := c.cc.Invoke(ctx, "/main.UserPartnerService/GetUserPartnerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPartnerServiceClient) DeleteUserPartnerById(ctx context.Context, in *DeleteUserPartneRequest, opts ...grpc.CallOption) (*DeleteUserPartnerReponse, error) {
	out := new(DeleteUserPartnerReponse)
	err := c.cc.Invoke(ctx, "/main.UserPartnerService/DeleteUserPartnerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPartnerServiceClient) CreateUserPartner(ctx context.Context, in *CreateUserPartnerRequest, opts ...grpc.CallOption) (*CreateUserPartnerReponse, error) {
	out := new(CreateUserPartnerReponse)
	err := c.cc.Invoke(ctx, "/main.UserPartnerService/CreateUserPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPartnerServiceServer is the server API for UserPartnerService service.
type UserPartnerServiceServer interface {
	GetUserPartnerById(context.Context, *UserPartnerByIdRequest) (*UserPartnerByIdReponse, error)
	GetUserPartnerList(context.Context, *UserPartnerListRequest) (*UserPartnerListReponse, error)
	DeleteUserPartnerById(context.Context, *DeleteUserPartneRequest) (*DeleteUserPartnerReponse, error)
	CreateUserPartner(context.Context, *CreateUserPartnerRequest) (*CreateUserPartnerReponse, error)
}

// UnimplementedUserPartnerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserPartnerServiceServer struct {
}

func (*UnimplementedUserPartnerServiceServer) GetUserPartnerById(ctx context.Context, req *UserPartnerByIdRequest) (*UserPartnerByIdReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartnerById not implemented")
}
func (*UnimplementedUserPartnerServiceServer) GetUserPartnerList(ctx context.Context, req *UserPartnerListRequest) (*UserPartnerListReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPartnerList not implemented")
}
func (*UnimplementedUserPartnerServiceServer) DeleteUserPartnerById(ctx context.Context, req *DeleteUserPartneRequest) (*DeleteUserPartnerReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPartnerById not implemented")
}
func (*UnimplementedUserPartnerServiceServer) CreateUserPartner(ctx context.Context, req *CreateUserPartnerRequest) (*CreateUserPartnerReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPartner not implemented")
}

func RegisterUserPartnerServiceServer(s *grpc.Server, srv UserPartnerServiceServer) {
	s.RegisterService(&_UserPartnerService_serviceDesc, srv)
}

func _UserPartnerService_GetUserPartnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPartnerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPartnerServiceServer).GetUserPartnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.UserPartnerService/GetUserPartnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPartnerServiceServer).GetUserPartnerById(ctx, req.(*UserPartnerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPartnerService_GetUserPartnerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPartnerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPartnerServiceServer).GetUserPartnerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.UserPartnerService/GetUserPartnerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPartnerServiceServer).GetUserPartnerList(ctx, req.(*UserPartnerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPartnerService_DeleteUserPartnerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPartneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPartnerServiceServer).DeleteUserPartnerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.UserPartnerService/DeleteUserPartnerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPartnerServiceServer).DeleteUserPartnerById(ctx, req.(*DeleteUserPartneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPartnerService_CreateUserPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPartnerServiceServer).CreateUserPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.UserPartnerService/CreateUserPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPartnerServiceServer).CreateUserPartner(ctx, req.(*CreateUserPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserPartnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.UserPartnerService",
	HandlerType: (*UserPartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPartnerById",
			Handler:    _UserPartnerService_GetUserPartnerById_Handler,
		},
		{
			MethodName: "GetUserPartnerList",
			Handler:    _UserPartnerService_GetUserPartnerList_Handler,
		},
		{
			MethodName: "DeleteUserPartnerById",
			Handler:    _UserPartnerService_DeleteUserPartnerById_Handler,
		},
		{
			MethodName: "CreateUserPartner",
			Handler:    _UserPartnerService_CreateUserPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol.proto",
}

func (m *UserPartner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Created != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x50
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Apps) > 0 {
		for k := range m.Apps {
			v := m.Apps[k]
			baseI := i
			i = encodeVarintProtocol(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProtocol(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProtocol(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AliasuserId) > 0 {
		i -= len(m.AliasuserId)
		copy(dAtA[i:], m.AliasuserId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.AliasuserId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PartnerId) > 0 {
		i -= len(m.PartnerId)
		copy(dAtA[i:], m.PartnerId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.PartnerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserPartnerListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UserPartnerListReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerListReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerListReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ListUser) > 0 {
		for iNdEx := len(m.ListUser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ListUser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtocol(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserPartnerByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Limit != 0 {
		i = encodeVarintProtocol(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPartnerByIdReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPartnerByIdReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPartnerByIdReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsrPartner != nil {
		{
			size, err := m.UsrPartner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserPartneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserPartneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserPartneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x5a
	}
	return len(dAtA) - i, nil
}

func (m *DeleteUserPartnerReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUserPartnerReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteUserPartnerReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserPartnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserPartnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserPartnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UsrPartner != nil {
		{
			size, err := m.UsrPartner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtocol(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserPartnerReponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserPartnerReponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserPartnerReponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintProtocol(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtocol(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtocol(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPartner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.PartnerId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.AliasuserId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if len(m.Apps) > 0 {
		for k, v := range m.Apps {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProtocol(uint64(len(k))) + 1 + sovProtocol(uint64(v))
			n += mapEntrySize + 1 + sovProtocol(uint64(mapEntrySize))
		}
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Created != 0 {
		n += 1 + sovProtocol(uint64(m.Created))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovProtocol(uint64(m.UpdatedAt))
	}
	return n
}

func (m *UserPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserPartnerListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserPartnerListReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ListUser) > 0 {
		for _, e := range m.ListUser {
			l = e.Size()
			n += 1 + l + sovProtocol(uint64(l))
		}
	}
	return n
}

func (m *UserPartnerByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovProtocol(uint64(m.Limit))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *UserPartnerByIdReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsrPartner != nil {
		l = m.UsrPartner.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *DeleteUserPartneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *DeleteUserPartnerReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *CreateUserPartnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsrPartner != nil {
		l = m.UsrPartner.Size()
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func (m *CreateUserPartnerReponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovProtocol(uint64(l))
	}
	return n
}

func sovProtocol(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtocol(x uint64) (n int) {
	return sovProtocol(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPartner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AliasuserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AliasuserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Apps == nil {
				m.Apps = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtocol
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProtocol
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProtocol
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtocol
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProtocol(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthProtocol
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Apps[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerListReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerListReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerListReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListUser = append(m.ListUser, &UserPartner{})
			if err := m.ListUser[len(m.ListUser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPartnerByIdReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPartnerByIdReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPartnerByIdReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrPartner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsrPartner == nil {
				m.UsrPartner = &UserPartner{}
			}
			if err := m.UsrPartner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserPartneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserPartneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserPartneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUserPartnerReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUserPartnerReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUserPartnerReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserPartnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserPartnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserPartnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsrPartner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UsrPartner == nil {
				m.UsrPartner = &UserPartner{}
			}
			if err := m.UsrPartner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserPartnerReponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserPartnerReponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserPartnerReponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtocol
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtocol
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtocol(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtocol
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtocol(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtocol
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtocol
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtocol
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtocol
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtocol
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtocol        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtocol          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtocol = fmt.Errorf("proto: unexpected end of group")
)
